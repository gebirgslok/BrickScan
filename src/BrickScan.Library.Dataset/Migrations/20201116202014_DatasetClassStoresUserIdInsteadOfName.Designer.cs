// <auto-generated />
using System;
using BrickScan.Library.Dataset.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BrickScan.Library.Dataset.Migrations
{
    [DbContext(typeof(DatasetDbContext))]
    [Migration("20201116202014_DatasetClassStoresUserIdInsteadOfName")]
    partial class DatasetClassStoresUserIdInsteadOfName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BrickScan.Library.Dataset.Model.DatasetClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("DatasetClasses");
                });

            modelBuilder.Entity("BrickScan.Library.Dataset.Model.DatasetColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BricklinkColorHtmlCode")
                        .IsRequired()
                        .HasColumnType("varchar(9)")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<int>("BricklinkColorId")
                        .HasColumnType("int");

                    b.Property<string>("BricklinkColorName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("BricklinkColorType")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DatasetColors");
                });

            modelBuilder.Entity("BrickScan.Library.Dataset.Model.DatasetImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DatasetItemId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayDatasetClassId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TrainDatasetClassId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(2083)")
                        .HasMaxLength(2083)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DatasetItemId");

                    b.HasIndex("DisplayDatasetClassId");

                    b.HasIndex("TrainDatasetClassId");

                    b.ToTable("DatasetImages");
                });

            modelBuilder.Entity("BrickScan.Library.Dataset.Model.DatasetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalIdentifier")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("DatasetClassId")
                        .HasColumnType("int");

                    b.Property<int>("DatasetColorId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DatasetClassId");

                    b.HasIndex("DatasetColorId");

                    b.ToTable("DatasetItems");
                });

            modelBuilder.Entity("BrickScan.Library.Dataset.Model.DatasetImage", b =>
                {
                    b.HasOne("BrickScan.Library.Dataset.Model.DatasetItem", null)
                        .WithMany("DisplayImages")
                        .HasForeignKey("DatasetItemId");

                    b.HasOne("BrickScan.Library.Dataset.Model.DatasetClass", "DisplayDatasetClass")
                        .WithMany("DisplayImages")
                        .HasForeignKey("DisplayDatasetClassId");

                    b.HasOne("BrickScan.Library.Dataset.Model.DatasetClass", "TrainDatasetClass")
                        .WithMany("TrainingImages")
                        .HasForeignKey("TrainDatasetClassId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BrickScan.Library.Dataset.Model.DatasetItem", b =>
                {
                    b.HasOne("BrickScan.Library.Dataset.Model.DatasetClass", "DatasetClass")
                        .WithMany("DatasetItems")
                        .HasForeignKey("DatasetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrickScan.Library.Dataset.Model.DatasetColor", "DatasetColor")
                        .WithMany()
                        .HasForeignKey("DatasetColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
